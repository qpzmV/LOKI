    pub fn build<R>(mut self, mut rng: R) -> Result<(RootKeys, Vec<ValidatorConfig>)>
    where
        R: ::rand::RngCore + ::rand::CryptoRng,
    {
        // Canonicalize the config directory path
        self.config_directory = self.config_directory.canonicalize()?;

        // Generate chain root keys
        let root_keys = RootKeys::generate(&mut rng);

        // Generate and initialize Validator configs
        let mut validators = (0..self.num_validators.get())
            .map(|i| {
                self.initialize_validator_config(
                    i,
                    &mut rng,
                    root_keys.validator_network_address_encryption_key,
                    root_keys.validator_network_address_encryption_key_version,
                )
            })
            .collect::<Result<Vec<_>>>()?;

        // Build genesis
        let mut genesis_storage =
            OnDiskStorage::new(self.config_directory.join("genesis-storage.json"));
        let (genesis, waypoint) = Self::genesis_ceremony(
            &mut genesis_storage,
            &root_keys,
            &validators,
            self.move_modules,
        )?;

        // Insert Genesis and Waypoint into each validator
        for validator in &mut validators {
            validator.insert_genesis(&genesis)?;
            validator.insert_waypoint(&waypoint)?;

            // verify genesis
            let validator_storage = Storage::from(validator.storage());
            let output = verify_genesis(
                StorageWrapper::new("validator", validator_storage),
                Some(validator.config.execution.genesis_file_location.as_path()),
            )?;

            anyhow::ensure!(
                output.split("match").count() == 5,
                "Failed to verify genesis"
            );
        }

        // Save the configs for each validator
        for validator in &mut validators {
            validator.save_config()?;
        }

        Ok((root_keys, validators))
    }

    fn initialize_validator_config<R>(
        &self,
        index: usize,
        rng: R,
        validator_network_address_encryption_key: NetworkAddressEncryptionKey,
        validator_network_address_encryption_key_version: NetworkAddressEncryptionKeyVersion,
    ) -> Result<ValidatorConfig>
    where
        R: ::rand::RngCore + ::rand::CryptoRng,
    {
        let name = index.to_string();
        let directory = self.config_directory.join(&name);
        std::fs::create_dir_all(&directory)?;

        let storage_config = Self::storage_config(&directory);

        let mut validator =
            ValidatorConfig::new(name, storage_config, directory, self.template.clone());
        Self::initialize_validator_storage(
            &validator,
            rng,
            validator_network_address_encryption_key,
            validator_network_address_encryption_key_version,
        )?;

        validator.config.set_data_dir(validator.directory.clone());
        let mut config = &mut validator.config;
        if index > 0 || self.randomize_first_validator_ports {
            config.randomize_ports();
        }

        // Setup the network configs
        let validator_network = config.validator_network.as_mut().unwrap();
        let fullnode_network = &mut config.full_node_networks[0];

        let validator_identity = validator_network.identity_from_storage();
        validator_network.identity = Identity::from_storage(
            validator_identity.key_name,
            validator_identity.peer_id_name,
            SecureBackend::OnDiskStorage(validator.storage_config.clone()),
        );
        validator_network.network_address_key_backend = Some(SecureBackend::OnDiskStorage(
            validator.storage_config.clone(),
        ));

        let fullnode_identity = fullnode_network.identity_from_storage();
        fullnode_network.identity = Identity::from_storage(
            fullnode_identity.key_name,
            fullnode_identity.peer_id_name,
            SecureBackend::OnDiskStorage(validator.storage_config.clone()),
        );

        // Setup consensus and execution configs
        config.consensus.safety_rules.service = SafetyRulesService::Thread;
        config.consensus.safety_rules.backend =
            SecureBackend::OnDiskStorage(validator.storage_config.clone());
        config.execution.backend = SecureBackend::OnDiskStorage(validator.storage_config.clone());

        Ok(validator)
    }


    fn storage_config(directory: &Path) -> OnDiskStorageConfig {
        let mut storage_config = OnDiskStorageConfig::default();
        storage_config.path = directory.join("secure-storage.json");
        storage_config.set_data_dir(directory.into());
        storage_config
    }

    fn initialize_validator_storage<R>(
        validator: &ValidatorConfig,
        mut rng: R,
        validator_network_address_encryption_key: NetworkAddressEncryptionKey,
        validator_network_address_encryption_key_version: NetworkAddressEncryptionKeyVersion,
    ) -> Result<()>
    where
        R: ::rand::RngCore + ::rand::CryptoRng,
    {
        let mut storage = validator.storage();

        // Set owner key and account address
        storage.import_private_key(OWNER_KEY, Ed25519PrivateKey::generate(&mut rng))?;
        let owner_address =
            diem_config::utils::validator_owner_account_from_name(validator.owner().as_bytes());
        storage.set(OWNER_ACCOUNT, owner_address)?;

        // Set operator key and account address
        let operator_key = Ed25519PrivateKey::generate(&mut rng);
        let operator_address =
            AuthenticationKey::ed25519(&Ed25519PublicKey::from(&operator_key)).derived_address();
        storage.set(OPERATOR_ACCOUNT, operator_address)?;
        storage.import_private_key(OPERATOR_KEY, operator_key)?;

        storage.import_private_key(CONSENSUS_KEY, Ed25519PrivateKey::generate(&mut rng))?;
        storage.import_private_key(EXECUTION_KEY, Ed25519PrivateKey::generate(&mut rng))?;
        storage.import_private_key(FULLNODE_NETWORK_KEY, Ed25519PrivateKey::generate(&mut rng))?;
        storage.import_private_key(VALIDATOR_NETWORK_KEY, Ed25519PrivateKey::generate(&mut rng))?;

        // Initialize all other data in storage
        storage.set(SAFETY_DATA, SafetyData::new(0, 0, 0, 0, None))?;
        storage.set(WAYPOINT, Waypoint::default())?;

        let mut encryptor = diem_network_address_encryption::Encryptor::new(storage);
        encryptor.initialize()?;
        encryptor.add_key(
            validator_network_address_encryption_key_version,
            validator_network_address_encryption_key,
        )?;

        Ok(())
    }
